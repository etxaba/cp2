# Playbook que almacena la salida del fichero /etc/fedora-release en una variable
# Luego imprime la variable por pantalla y en un fichero de texto
# comando de ejecucion
# $ ansible-playbook -i inventory 02_playbook.yaml -K
---
- name: 'Almancenar version de sistema operativo'
  hosts: all
  remote_user: azureuser
  become: true
  vars_files:
    - vars.yaml
  tasks:
    - name: 'Actualizar hostnames'
      hostname:
        name: "{{ nombre_dominio }}"
    
    - name: 'Actualizar /etc/hosts con las IPs de todos los host del inventario'
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item].ip_interna }} {{ hostvars[item].nombre_dominio }} {{ hostvars[item].ansible_facts.hostname }}"
        state: present
      with_items: "{{ groups.all }}"
    
    - name: 'Actualizacion del sistema operativo'
      yum:
        name: '*'
        state: latest
      notify: Reiniciar el nodo
      
    - name: 'Establecer timezone'
      timezone:
        name: "{{ zone }}"
        
    - name: Instalar Chrony
      yum:
        name: chrony
        state: latest
          
    - name: Verificar ejecuci贸n de Chrony
      service:
        name: chronyd
        state: started
        
    - name: Instalar Firewalld
      yum:
        name: firewalld
        state: latest
          
    - name: Start firewalld
      service:
        name: firewalld
        state: started
        enabled: yes
        
    - name: Deshabilitar SELinux
      selinux:
        state: disabled
      notify: Reiniciar el nodo
      
      
    #- name: Habilitar transparent masquerading - 1
    #  shell: |
    #         modprobe br_netfilter
    
    - name: Habilitar transparent masquerading - 1
      modprobe:
        name: overlay
        state: present
        
    - name: Habilitar transparent masquerading - 2
      modprobe:
        name: br_netfilter
        state: present
    
    - name: Habilitar transparent masquerading - 3
      firewalld:
        masquerade: enable
        permanent: yes
        state: enabled
    
    - name: Habilitar transparent masquerading - 4
      systemd:
        name: firewalld
        state: reloaded
        
    - name: Habilitar transparent masquerading - 5
      file:
        path: "/etc/sysctl.d/k8s.conf"
        state: "touch"
    
    - name: Habilitar transparent masquerading - 6
      blockinfile:
        path: "/etc/sysctl.d/k8s.conf"
        block: |
                net.bridge.bridge-nf-call-ip6tables = 1
                net.bridge.bridge-nf-call-iptables = 1
                net.ipv4.ip_forward = 1
    
    - name: Habilitar transparent masquerading - 7
      command: sysctl --system
      
    
    - name: Desactivar la partici贸n de swap
      shell: |
              swapoff -a
              sed -i '/swap/d' /etc/fstab
    
    
    - name: Install cri-o repos
      shell: |
              VERSION=1.24
              OS=CentOS_8_Stream
              sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo
              sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$VERSION.repo

    
    - name: Install cri-o 
      yum:
          name:
            - "cri-o "
            - "cri-tools"
          state: present
      
    - name: Habilitar los m贸dulos de kernel necesarios - 1
      file:
        path: "/etc/modules-load.d/crio.conf"
        state: "touch"
    
    
    - name: Habilitar los m贸dulos de kernel necesarios - 2
      blockinfile:
        path: "/etc/modules-load.d/crio.conf"
        block: |
                overlay
                br_netfilter
                
    - name: Reload configs
      systemd: daemon_reload=yes

    - name: Enable Cri-o Service
      systemd:
        name: crio
        enabled: yes

    - name: Restart Cri-o
      systemd:
        state: restarted
        daemon_reload: yes
        name: crio

    - name: Make sure a crio is running
      systemd:
        state: started
        name: crio
    
    
    - name: Creating a repository file for Kubernetes
      file:
         path: /etc/yum.repos.d/kubernetes.repo
         state: touch
         
    - name: Adding repository details in Kubernetes repo file.
      blockinfile:
         path: /etc/yum.repos.d/kubernetes.repo
         block: |
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=0
            repo_gpgcheck=0
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                    https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

    - name: Install kubernetes
      yum:
          name:
            - "kubelet"
            - "kubeadm"
            - "kubectl"
          state: present
    
    - name: Enable kubelet Service
      systemd:
        name: kubelet
        enabled: yes

    - name: Restart kubelet
      systemd:
        state: restarted
        daemon_reload: yes
        name: kubelet

    - name: Make sure kubelet is running
      systemd:
        state: started
        name: kubelet
   
   # - name: Start cri-o 
   #   shell: |
   #           systemctl daemon-reload
   #           systemctl enable crio --now
   #           systemctl enable kubelet --now
          
  
  
  
  
  
    - name: 'Obtener version de sistema operativo'
      shell: 'cat /etc/centos-release'
      register: os_version

    - name: 'Imprimir valor de la variable por pantalla'
      debug:
        var: os_version.stdout

    - name: 'Imprimir valor de la variable en un fichero de texto'
      copy:
        content: "{{ os_version.stdout }}\n"
        dest: /tmp/os_version
        
    - name: 'Instalar master'
      include_role:
        name: role_master
      when: inventory_hostname in groups['master']
      tags: master

    - name: 'Instalar worker'
      include_role:
        name: role_worker
      when: inventory_hostname in groups['worker']
      tags: worker
      
    - name: 'Instalar nfs'
      include_role:
        name: role_nfs
      when: inventory_hostname in groups['nfs']
      tags: nfs
      
  handlers:
    - name: 'Reiniciar el nodo'
      reboot:
        pre_reboot_delay: 5
        msg: 'Reinicio iniciado por Ansible'